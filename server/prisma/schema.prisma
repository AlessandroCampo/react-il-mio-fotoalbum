// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id                  Int            @id @default(autoincrement())
  username            String         @unique
  email               String         @unique
  avatar              String?
  password            String
  bio                 String?        @db.Text
  role                Role           @default(USER)
  confirmedEmail      Boolean        @default(false)
  pictures            Picture[]
  comments            Comment[]
  likes               Like[]
  followedBy          User[]         @relation("UserFollows")
  following           User[]         @relation("UserFollows")
  failedLoginAttempts Int            @default(0)
  sentMessages        Message[]      @relation("SentMessages")
  receivedMessages    Message[]      @relation("ReceivedMessages")
  saves               Save[]
  downloads           Download[]
  views               View[]
  notifications       Notification[]
}

model Message {
  id          Int      @id @default(autoincrement())
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  content     String   @db.Text
  senderId    Int
  recipientId Int
  status      String   @default("sent")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Picture {
  id          Int        @id @default(autoincrement())
  slug        String     @unique
  User        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  title       String
  description String     @db.Text
  image       String
  isVisibile  Boolean    @default(true)
  comments    Comment[]
  likes       Like[]
  saves       Save[]
  downloads   Download[]
  views       View[]
  categories  Category[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  pictureId Int?
  Picture   Picture? @relation(fields: [pictureId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  pictureId Int?
  Picture   Picture? @relation(fields: [pictureId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Save {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  Picture   Picture? @relation(fields: [pictureId], references: [id])
  pictureId Int?
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Download {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  Picture   Picture? @relation(fields: [pictureId], references: [id])
  pictureId Int?
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model View {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  Picture   Picture? @relation(fields: [pictureId], references: [id])
  pictureId Int?
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  pictures Picture[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
